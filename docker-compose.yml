version: '3.8'

services:
  # Redis cache for API key management and rate limiting
  redis:
    image: redis:7-alpine
    container_name: medical_inventory_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL database for request logging and analytics
  postgres:
    image: postgres:15-alpine
    container_name: medical_inventory_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: medical_inventory
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d medical_inventory"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Main API service (CPU version)
  api-cpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: medical_inventory_api_cpu
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://inventory_user:${DB_PASSWORD:-secure_password_123}@postgres:5432/medical_inventory
      - MODEL_PATH=/app/models
      - LOG_LEVEL=INFO
      - WORKERS=4
      - CUDA_VISIBLE_DEVICES=""
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # WebSocket service for real-time detection
  websocket:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: medical_inventory_websocket
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
      - LOG_LEVEL=INFO
    ports:
      - "8001:8001"
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - api-cpu
    command: ["python3", "websocket_server.py"]

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: medical_inventory_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: medical_inventory_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: medical_inventory_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-cpu
      - websocket

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: medical_inventory_network
    driver: bridge