name: Medical Inventory CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking with mypy
      run: |
        pip install mypy
        mypy . --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.api
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to staging
      run: |
        kubectl apply -f kubernetes/
        kubectl set image deployment/medical-inventory-api api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop
        kubectl rollout status deployment/medical-inventory-api
    
    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=medical-inventory-api --timeout=300s
        # Add actual smoke tests here
        curl -f http://staging.medical-inventory.com/health

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Blue-Green Deployment
      run: |
        # Create green deployment
        sed 's/medical-inventory-api/medical-inventory-api-green/g' kubernetes/deployment.yaml | kubectl apply -f -
        kubectl set image deployment/medical-inventory-api-green api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        kubectl rollout status deployment/medical-inventory-api-green
        
        # Run health checks
        kubectl wait --for=condition=ready pod -l app=medical-inventory-api-green --timeout=300s
        
        # Switch traffic to green
        kubectl patch service medical-inventory-api-service -p '{"spec":{"selector":{"app":"medical-inventory-api-green"}}}'
        
        # Clean up blue deployment
        kubectl delete deployment medical-inventory-api --ignore-not-found=true
        
        # Rename green to blue
        kubectl patch deployment medical-inventory-api-green -p '{"metadata":{"name":"medical-inventory-api"}}'
    
    - name: Run production smoke tests
      run: |
        # Add comprehensive production tests
        curl -f https://api.medical-inventory.com/health
        curl -f https://api.medical-inventory.com/api/v1/models

  model-validation:
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.event.head_commit.modified, 'models/') || contains(github.event.head_commit.added, 'models/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Validate model architecture
      run: |
        python -c "from medical_yolo import create_medical_yolo_variants; models = create_medical_yolo_variants(); print('âœ“ Models loaded successfully')"
    
    - name: Run model benchmarks
      run: |
        python evaluation_framework.py
    
    - name: Upload model reports
      uses: actions/upload-artifact@v3
      with:
        name: model-evaluation-reports
        path: |
          evaluation_report.json
          evaluation_plots/

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()